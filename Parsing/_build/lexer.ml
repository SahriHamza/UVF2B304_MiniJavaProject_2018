# 3 "lexer.mll"
 
open Lexing
open ErrorHandler
open Parser


let keyword_table = Hashtbl.create 15
let _ = List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
[
	(* macro *)
	"import",		IMPORT;
	"throw",		THROW;
	"throws",		THROWS;
	"extends",		EXTENDS;
	"implements",	IMMPLEMENTS;
	"break",		BREAK;
	"catch",		CATCH;
	"continue",		CONTINUE;
	"return",		RETURN;
	"for",			FOR;
	"while",		WHILE;
	"assert",		ASSERT;
	"do",			DO;
	"goto",			GOTO;
	"switch",		SWITCH;
	"case",			CASE;
	"if",			IF;
	"else ",		ELSE;
	"super",		SUPER;
	"new",			NEW;
	(*  *)
	"instanceof",	INSTANCEOF;
	"null",			NULL;
	"true",			BOOLEANLIT true;
	"false",		BOOLEANLIT false;
	"this",			THIS;
	(* other names *)
	"package",		PACKAGE;
	"enum",			ENUM;
	"class",		CLASS;
	"struct",		STRUCT;
	"interface",	INTERFACE;
	(* Modifiers *)
	"default",		DEFAULT;
	"const",		CONST;
	"public",		PUBLIC;
	"abstract",		ABSTRACT;
	"static",		STATIC;
	"protected",	PROTECTED;
	"private",		PRIVATE;
	"volatile",		VOLATILE;
	"strictfp",		STRICTFP;
	"transient",	TRANSIENT;
	"final",		FINAL;
	"synchronized",	SYNCHRONIZED;
	(* types *)
	"byte",			BYTE;
	"void",			VOID;
	"long",			LONG;
	"float",		FLOAT;
	"int",			INT;
	"boolean",		BOOLEAN;
	"short",		SHORT;
	"char",			CHAR;
	"double",		DOUBLE
]


# 71 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\198\255\199\255\251\255\002\000\003\000\030\000\031\000\
    \085\000\032\000\064\000\067\000\035\000\086\000\069\000\109\000\
    \001\000\193\000\012\001\034\001\087\000\254\255\001\000\008\000\
    \209\255\236\255\022\001\066\001\044\001\076\001\088\001\163\001\
    \250\255\134\000\224\255\210\255\237\255\223\255\220\255\070\000\
    \202\255\219\255\072\000\201\255\084\000\200\255\205\255\229\255\
    \206\255\228\255\204\255\208\255\207\255\203\255";
  Lexing.lex_backtrk =
   "\003\000\255\255\255\255\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\003\000\002\000\004\000\255\255\001\000\000\000\
    \255\255\255\255\002\000\255\255\003\000\255\255\006\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \255\255\255\255\025\000\255\255\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\003\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \033\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\033\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\021\000\021\000\000\000\022\000\000\000\000\000\
    \000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\012\000\016\000\032\000\000\000\004\000\008\000\002\000\
    \023\000\000\000\006\000\013\000\000\000\020\000\018\000\005\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\011\000\014\000\010\000\053\000\
    \052\000\015\000\015\000\015\000\015\000\017\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\051\000\050\000\046\000\007\000\015\000\
    \037\000\015\000\015\000\015\000\015\000\017\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\049\000\009\000\041\000\042\000\039\000\
    \038\000\036\000\034\000\040\000\025\000\043\000\044\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\045\000\048\000\035\000\024\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\047\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
    \032\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \000\000\000\000\000\000\000\000\030\000\000\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \000\000\000\000\000\000\000\000\029\000\000\000\029\000\000\000\
    \000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \018\000\027\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\000\000\027\000\
    \000\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\
    \000\000\027\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\027\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\000\000\000\000\000\000\000\000\030\000\
    \000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
    \000\000\000\000\030\000\000\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\255\255\000\000\255\255\255\255\
    \255\255\023\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\016\000\255\255\000\000\000\000\000\000\
    \023\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\004\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\007\000\009\000\000\000\000\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\000\000\010\000\010\000\011\000\
    \011\000\013\000\014\000\039\000\020\000\042\000\042\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\044\000\008\000\013\000\020\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\009\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\255\255\
    \033\000\255\255\255\255\255\255\255\255\255\255\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \255\255\255\255\255\255\255\255\015\000\255\255\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \255\255\255\255\255\255\255\255\017\000\255\255\017\000\255\255\
    \255\255\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\016\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\255\255\255\255\255\255\255\255\
    \017\000\255\255\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \019\000\018\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\019\000\
    \255\255\255\255\255\255\255\255\255\255\027\000\255\255\027\000\
    \255\255\018\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\033\000\019\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\255\255\255\255\255\255\255\255\030\000\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\255\255\255\255\
    \255\255\255\255\031\000\255\255\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 94 "lexer.mll"
                  ( read lexbuf )
# 290 "lexer.ml"

  | 1 ->
# 95 "lexer.mll"
                   ( Lexing.new_line lexbuf; read lexbuf )
# 295 "lexer.ml"

  | 2 ->
let
# 96 "lexer.mll"
                    i
# 301 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 96 "lexer.mll"
                         ( INTEGERLIT (int_of_string i) )
# 305 "lexer.ml"

  | 3 ->
let
# 97 "lexer.mll"
                          f
# 311 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 97 "lexer.mll"
                            ( FLOATLIT (float_of_string f) )
# 315 "lexer.ml"

  | 4 ->
let
# 98 "lexer.mll"
                      c
# 321 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 98 "lexer.mll"
                          ( CHARLIT c )
# 325 "lexer.ml"

  | 5 ->
let
# 99 "lexer.mll"
                   s
# 331 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 99 "lexer.mll"
                        ( STRINGLIT s)
# 335 "lexer.ml"

  | 6 ->
let
# 100 "lexer.mll"
           id
# 341 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 100 "lexer.mll"
                     ( try Hashtbl.find keyword_table id with Not_found -> IDENT id )
# 345 "lexer.ml"

  | 7 ->
# 102 "lexer.mll"
                     ( POINT )
# 350 "lexer.ml"

  | 8 ->
# 103 "lexer.mll"
                     ( SEMICOLON )
# 355 "lexer.ml"

  | 9 ->
# 104 "lexer.mll"
                     ( COMMA )
# 360 "lexer.ml"

  | 10 ->
# 105 "lexer.mll"
                     ( COLON )
# 365 "lexer.ml"

  | 11 ->
# 106 "lexer.mll"
                     ( LBRACE )
# 370 "lexer.ml"

  | 12 ->
# 107 "lexer.mll"
                     ( RBRACE )
# 375 "lexer.ml"

  | 13 ->
# 108 "lexer.mll"
                     ( LPAREN )
# 380 "lexer.ml"

  | 14 ->
# 109 "lexer.mll"
                     ( RPAREN )
# 385 "lexer.ml"

  | 15 ->
# 110 "lexer.mll"
                     ( LBRACK )
# 390 "lexer.ml"

  | 16 ->
# 111 "lexer.mll"
                     ( RBRACK )
# 395 "lexer.ml"

  | 17 ->
# 113 "lexer.mll"
                     ( EQUAL )
# 400 "lexer.ml"

  | 18 ->
# 114 "lexer.mll"
                     ( INCR )
# 405 "lexer.ml"

  | 19 ->
# 115 "lexer.mll"
                     ( DECR )
# 410 "lexer.ml"

  | 20 ->
# 116 "lexer.mll"
                     ( COND )
# 415 "lexer.ml"

  | 21 ->
# 117 "lexer.mll"
                     ( EXCL )
# 420 "lexer.ml"

  | 22 ->
# 118 "lexer.mll"
                     ( TILDE )
# 425 "lexer.ml"

  | 23 ->
# 119 "lexer.mll"
                     ( ANNOT )
# 430 "lexer.ml"

  | 24 ->
# 120 "lexer.mll"
                     ( LSHIFT )
# 435 "lexer.ml"

  | 25 ->
# 121 "lexer.mll"
                     ( RSHIFT )
# 440 "lexer.ml"

  | 26 ->
# 123 "lexer.mll"
                     ( CONDOR )
# 445 "lexer.ml"

  | 27 ->
# 124 "lexer.mll"
                     ( CONDAND )
# 450 "lexer.ml"

  | 28 ->
# 125 "lexer.mll"
                     ( OR )
# 455 "lexer.ml"

  | 29 ->
# 126 "lexer.mll"
                     ( XOR )
# 460 "lexer.ml"

  | 30 ->
# 127 "lexer.mll"
                     ( AND )
# 465 "lexer.ml"

  | 31 ->
# 128 "lexer.mll"
                     ( ISEQUAL )
# 470 "lexer.ml"

  | 32 ->
# 129 "lexer.mll"
                     ( ISNOTEQUAL )
# 475 "lexer.ml"

  | 33 ->
# 130 "lexer.mll"
                     ( INF )
# 480 "lexer.ml"

  | 34 ->
# 131 "lexer.mll"
                     ( SUP )
# 485 "lexer.ml"

  | 35 ->
# 132 "lexer.mll"
                     ( INFOREQUAL )
# 490 "lexer.ml"

  | 36 ->
# 133 "lexer.mll"
                     ( SUPOREQUAL )
# 495 "lexer.ml"

  | 37 ->
# 134 "lexer.mll"
                     ( LSHIFT )
# 500 "lexer.ml"

  | 38 ->
# 135 "lexer.mll"
                     ( RSHIFT )
# 505 "lexer.ml"

  | 39 ->
# 136 "lexer.mll"
                     ( USHIFT )
# 510 "lexer.ml"

  | 40 ->
# 137 "lexer.mll"
                     ( PLUS )
# 515 "lexer.ml"

  | 41 ->
# 138 "lexer.mll"
                     ( MINUS )
# 520 "lexer.ml"

  | 42 ->
# 139 "lexer.mll"
                     ( TIMES )
# 525 "lexer.ml"

  | 43 ->
# 140 "lexer.mll"
                     ( DIV )
# 530 "lexer.ml"

  | 44 ->
# 141 "lexer.mll"
                     ( MOD )
# 535 "lexer.ml"

  | 45 ->
# 143 "lexer.mll"
                     ( PLUSEQUAL )
# 540 "lexer.ml"

  | 46 ->
# 144 "lexer.mll"
                     ( MINUSEQUAL )
# 545 "lexer.ml"

  | 47 ->
# 145 "lexer.mll"
                     ( TIMESEQUAL )
# 550 "lexer.ml"

  | 48 ->
# 146 "lexer.mll"
                     ( DIVEQUAL )
# 555 "lexer.ml"

  | 49 ->
# 147 "lexer.mll"
                     ( ANDEQUAL )
# 560 "lexer.ml"

  | 50 ->
# 148 "lexer.mll"
                     ( OREQUAL )
# 565 "lexer.ml"

  | 51 ->
# 149 "lexer.mll"
                     ( XOREQUAL )
# 570 "lexer.ml"

  | 52 ->
# 150 "lexer.mll"
                     ( MODEQUAL )
# 575 "lexer.ml"

  | 53 ->
# 151 "lexer.mll"
                     ( LSHIFTEQUAL )
# 580 "lexer.ml"

  | 54 ->
# 152 "lexer.mll"
                     ( RSHIFTEQUAL )
# 585 "lexer.ml"

  | 55 ->
# 153 "lexer.mll"
                     ( USHIFTEQUAL )
# 590 "lexer.ml"

  | 56 ->
let
# 154 "lexer.mll"
       c
# 596 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 154 "lexer.mll"
                     ( raise_error (Illegal_character(c)) lexbuf )
# 600 "lexer.ml"

  | 57 ->
# 155 "lexer.mll"
                     ( EOF )
# 605 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

;;

# 157 "lexer.mll"
 
let print_token = function
| EOF                -> print_string "eof"
| IDENT id           -> print_string "ident ("; print_string id; print_string ")"
| FLOATLIT f         -> print_string "real ("; print_float f; print_string ")"
| INTEGERLIT i			 -> print_string "integer ("; print_int i; print_string ")"
| BOOLEANLIT b       -> ( match b with
											| true  -> print_string "boolean ( true  )"
											| false -> print_string "boolean ( false )")
| NULL               -> print_string "null"
| ABSTRACT           -> print_string "abstract"
| ASSERT             -> print_string "assert"
| BOOLEAN            -> print_string "boolean"
| BREAK              -> print_string "break"
| BYTE               -> print_string "byte"
| CASE               -> print_string "case"
| CATCH              -> print_string "catch"
| CHAR               -> print_string "char"
| CLASS              -> print_string "class"
| CONST              -> print_string "const"
| CONTINUE           -> print_string "continue"
| DEFAULT            -> print_string "default"
| DO                 -> print_string "do"
| DOUBLE             -> print_string "double"
| ELSE               -> print_string "else"
| ENUM               -> print_string "enum"
| EXTENDS            -> print_string "extends"
| FINAL              -> print_string "final"
| FINALLY            -> print_string "finally"
| FLOAT              -> print_string "float"
| FOR                -> print_string "for"
| IF                 -> print_string "if"
| GOTO               -> print_string "goto"
| IMPLEMENTS         -> print_string "implements"
| IMPORT             -> print_string "import"
| INSTANCEOF         -> print_string "instanceof"
| INT                -> print_string "int"
| INTERFACE          -> print_string "interface"
| LONG               -> print_string "long"
| NATIVE             -> print_string "native"
| NEW                -> print_string "new"
| PACKAGE            -> print_string "package"
| PRIVATE            -> print_string "private"
| PROTECTED          -> print_string "protected"
| PUBLIC             -> print_string "public"
| RETURN             -> print_string "return"
| SHORT              -> print_string "short"
| STATIC             -> print_string "static"
| STRICTFP           -> print_string "strictfp"
| SUPER              -> print_string "super"
| SWITCH             -> print_string "switch"
| SYNCHRONIZED       -> print_string "synchronized"
| THIS               -> print_string "this"
| THROW              -> print_string "throw"
| THROWS             -> print_string "throws"
| TRANSIENT          -> print_string "transient"
| TRY                -> print_string "try"
| VOID               -> print_string "void"
| VOLATILE           -> print_string "volatile"
| WHILE              -> print_string "while"
| PLUS               -> print_string "plus"
| MINUS              -> print_string "minus"
| TIMES              -> print_string "times"
| DIV                -> print_string "div"
| AND                -> print_string "and"
| OR                 -> print_string "or"
| XOR                -> print_string "xor"
| MOD                -> print_string "mod"
| EQUAL              -> print_string "equal"
| INF                -> print_string "inf"
| SUP                -> print_string "sup"
| CONDOR             -> print_string "condor"
| CONDAND            -> print_string "condand"
| INCR               -> print_string "incr"
| DECR               -> print_string "decr"
| COND               -> print_string "cond"
| EXCL               -> print_string "excl"
| TILDE              -> print_string "tilde"
| ANNOT              -> print_string "annot"
| ISEQUAL            -> print_string "isequal"
| ISNOTEQUAL         -> print_string "isnotequal"
| PLUSEQUAL          -> print_string "plusequal"
| MINUSEQUAL         -> print_string "minusequal"
| TIMESEQUAL         -> print_string "timesequal"
| DIVEQUAL           -> print_string "divequal"
| ANDEQUAL           -> print_string "andequal"
| OREQUAL            -> print_string "orequal"
| XOREQUAL           -> print_string "xorequal"
| MODEQUAL           -> print_string "modequal"
| INFOREQUAL         -> print_string "inforequal"
| SUPOREQUAL         -> print_string "suporequal"
| LSHIFT             -> print_string "lshift"
| RSHIFT             -> print_string "rshift"
| LSHIFTEQUAL        -> print_string "lshiftequal"
| RSHIFTEQUAL        -> print_string "rshiftequal"
| USHIFT             -> print_string "ushift"
| USHIFTEQUAL        -> print_string "ushiftequal"
| POINT              -> print_string "point"
| SEMICOLON          -> print_string "semicolon"
| COMMA              -> print_string "comma"
| COLON              -> print_string "colon"
| LBRACE             -> print_string "lbrace"
| RBRACE             -> print_string "rbrace"
| LPAREN             -> print_string "lparen"
| RPAREN             -> print_string "rparen"
| LBRACK             -> print_string "lbrack"
| RBRACK             -> print_string "rbrack"

# 721 "lexer.ml"
